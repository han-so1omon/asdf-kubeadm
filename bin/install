#!/usr/bin/env bash

set -e
set -o pipefail

ASDF_INSTALL_TYPE=${ASDF_INSTALL_TYPE:-version  }
[ -n "$ASDF_INSTALL_VERSION" ] || (>&2 echo 'Missing ASDF_INSTALL_VERSION' && exit 1)
[ -n "$ASDF_INSTALL_PATH" ] || (>&2 echo 'Missing ASDF_INSTALL_PATH' && exit 1)

install_kubeadm() {
  local install_type=$1
  local version=$2
  local install_path=$3
  local bin_install_path="$install_path/bin"
  local download_url="$(get_download_url $version)"
  local platform="$(get_arch)"

  mkdir -p "${bin_install_path}"

  if [ $platform == "darwin" ]; then
    echo "As of 1.24, kubeadm is not compiled for MacOs"
    exit 1
  fi

  local bin_path="${bin_install_path}/kubeadm"
  echo "Downloading kubeadm from ${download_url}"
  if [ ! -d "$bin_install_path" ]; then
    mkdir -p $bin_install_path
  fi
  if curl -LO -sf "$download_url" -o "$bin_path"; then
    chmod +x $bin_path
  else
    exit 1
  fi
}

get_arch() {
  uname | tr '[:upper:]' '[:lower:]'
}

get_cpu() {
  local machine_hardware_name
  machine_hardware_name=${ASDF_KUBEADM_OVERWRITE_ARCH:-"$(uname -m)"}

  case "$machine_hardware_name" in
    'x86_64') local cpu_type="amd64";;
    'powerpc64le' | 'ppc64le') local cpu_type="ppc64le";;    
    'aarch64') local cpu_type="arm64";;
    'armv7l') local cpu_type="arm";;
    *) local cpu_type="$machine_hardware_name";;
  esac

  echo "$cpu_type"
}

get_download_url() {
  local version="$1"
  local platform="$(get_arch)"
  echo "https://dl.k8s.io/release/v${version}/bin/${platform}/$(get_cpu)/kubeadm"
}

install_kubeadm $ASDF_INSTALL_TYPE $ASDF_INSTALL_VERSION $ASDF_INSTALL_PATH
